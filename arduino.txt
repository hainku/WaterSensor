#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>

#define trigPin D5
#define echoPin D6

#define LED1 D1   // GPIO5
#define LED2 D2   // GPIO4
#define LED3 D7   // GPIO13

float duration, distance;

// WiFi credentials
const char* ssid = "PLDTHOMEFIBRD8CDD";
const char* password = "PLDTWIFI82GEK";

// Your server endpoint (replace with your URL)
const char* serverURL = "http://192.168.1.20/brgy/receiver.php"; 

void setup() {
  Serial.begin(115200);

  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);

  pinMode(LED1, OUTPUT);
  pinMode(LED2, OUTPUT);
  pinMode(LED3, OUTPUT);

  // Connect to WiFi
  Serial.println("Connecting to WiFi...");
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected!");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());
}

void loop() {
  // Trigger ultrasonic pulse
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  // Measure duration
  duration = pulseIn(echoPin, HIGH);

  // Calculate distance (cm)
  distance = (duration * 0.0343) / 2;
  if(distance>200){distance=200;}
  distance=200-distance;
  if(distance<=30){
    digitalWrite(LED1, HIGH);
    digitalWrite(LED2, LOW);
    digitalWrite(LED3, LOW);
  }else if(distance<=70 && distance>30){
    digitalWrite(LED1, LOW);
    digitalWrite(LED2, HIGH);
    digitalWrite(LED3, LOW);
  }else{
    digitalWrite(LED1, LOW);
    digitalWrite(LED2, LOW);
    digitalWrite(LED3, HIGH);
  }
  Serial.print("Distance: ");
  Serial.print(distance);
  Serial.println(" cm");

  // Send data to your server
  if (WiFi.status() == WL_CONNECTED) {
    WiFiClient client;
    HTTPClient http;

    // Example: send as GET parameter
    String url = String(serverURL) + "?distance=" + String(distance);
    http.begin(client, url);

    int httpCode = http.GET();  // Send GET request
    if (httpCode > 0) {
      Serial.printf("Server response: %d\n", httpCode);
      String payload = http.getString();
      Serial.println("Reply: " + payload);
    } else {
      Serial.printf("HTTP request failed: %s\n", http.errorToString(httpCode).c_str());
    }

    http.end();
  }

  delay(5000);  // send every 5 seconds
}
